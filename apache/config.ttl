# Licensed under the terms of http://www.apache.org/licenses/LICENSE-2.0

## Fuseki Server configuration file.

@prefix :        <#> .
@prefix fuseki:  <http://jena.apache.org/fuseki#> .
@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .
@prefix tdb:    <http://jena.hpl.hp.com/2008/tdb#> .
@prefix ja:      <http://jena.hpl.hp.com/2005/11/Assembler#> .

[] rdf:type fuseki:Server ;
   # Example::
   # Server-wide query timeout.   
   # 
   # Timeout - server-wide default: milliseconds.
   # Format 1: "1000" -- 1 second timeout
   # Format 2: "10000,60000" -- 10s timeout to first result, 
   #                            then 60s timeout for the rest of query.
   #
   # See javadoc for ARQ.queryTimeout for details.
   # This can also be set on a per dataset basis in the dataset assembler.
   #
   # ja:context [ ja:cxtName "arq:queryTimeout" ;  ja:cxtValue "30000" ] ;

   # Add any custom classes you want to load.
   # Must have a "public static void init()" method.
   # ja:loadClass "your.code.Class" ;   

   # End triples.
   .
   
   # Dienstdefinition f√ºr Fuseki
<#service> rdf:type fuseki:Service ;
    fuseki:name                         "db_cn" ;    # Dienst-Name im Endpoint-URL
    fuseki:serviceQuery                 "sparql" ;
    fuseki:serviceUpdate                "update" ;
    fuseki:serviceReadWriteGraphStore   "data" ;
    fuseki:dataset                      <#reasonedDataset> .

# Dataset mit Reasoner
<#reasonedDataset> rdf:type ja:RDFDataset ;
    ja:defaultGraph                     <#reasonedGraph> .

# Grundgraph mit Reasoner
<#reasonedGraph> rdf:type ja:InfModel ;                     # Erzeugt ein Modell mit Inferenz
    ja:baseModel                        <#baseGraph> ;
    ja:reasoner                         <#reasoner> .

# Reasoner-Definition (z. B. RDFS-Reasoner)
<#reasoner> rdf:type ja:ReasonerFactory ;
    ja:reasonerURL <http://jena.hpl.hp.com/2003/GenericRuleReasoner> ;
	ja:rulesFrom <./rules.ttl> .

# Basismodell mit Daten
<#baseGraph> rdf:type tdb:GraphTDB ;
    tdb:location                        "DB_CN" ;   # Speicherort des Datenspeichers
	
